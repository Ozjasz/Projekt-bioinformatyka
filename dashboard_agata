import streamlit as st
import py3Dmol
import requests
from Bio.PDB import PDBParser
from io import StringIO
from collections import Counter
import re
from deep_translator import GoogleTranslator
import random
import streamlit.components.v1 as components


# Ustawienia strony
st.set_page_config(page_title="3D Protein Viewer", layout="wide")
# translate = st.sidebar.checkbox("T≈Çumacz na polski", value=True)
col_a, col_b = st.columns([8, 1])
with col_b:
    translate = st.checkbox("üáµüá±", value=True, help="T≈Çumacz na polski")
st.title("üß¨ Wizualizacja struktury bia≈Çka 3D" if translate else "üß¨ 3D Protein Structure Visualization")

THREE_TO_ONE = {
    'ALA': 'A', 'ARG': 'R', 'ASN': 'N', 'ASP': 'D', 'CYS': 'C',
    'GLN': 'Q', 'GLU': 'E', 'GLY': 'G', 'HIS': 'H', 'ILE': 'I',
    'LEU': 'L', 'LYS': 'K', 'MET': 'M', 'PHE': 'F', 'PRO': 'P',
    'SER': 'S', 'THR': 'T', 'TRP': 'W', 'TYR': 'Y', 'VAL': 'V'
}




def fetch_pdb(pdb_id):
    url = f"https://files.rcsb.org/download/{pdb_id}.pdb"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response.text
    except Exception as e:
        st.error(f"Failed to fetch PDB {pdb_id}: {str(e)}")
        return None


def extract_metadata(pdb_string):
    metadata = {
        'title': '', 'resolution': 'N/A', 'organism': 'N/A', 'experiment': 'N/A',
        'classification': 'N/A', 'keywords': 'N/A', 'composition': {},
        'chains': set(), 'residues': 0, 'atoms': 0, 'elements': {},
        'ligands': [], 'ligand_counts': Counter(), 'disulfide_bonds': [],
        'active_sites': [], 'sequences': {}
    }

    active_site_residues = set()
    for line in pdb_string.splitlines():
        if line.startswith("SITE"):
            parts = line.split()
            for i in range(4, len(parts), 4):
                if len(parts) > i + 2:
                    chain = parts[i]
                    resnum = parts[i + 1]
                    resname = parts[i + 2]
                    active_site_residues.add(f"{chain}:{resnum}:{resname}")
                    metadata['active_sites'].append({
                        'chain': chain, 'resnum': resnum, 'resname': resname
                    })

    for line in pdb_string.splitlines():
        if line.startswith("TITLE "):
            metadata["title"] += line[10:].strip() + " "
        elif line.startswith("EXPDTA"):
            metadata["experiment"] = line[10:].strip()
        elif line.startswith("REMARK   2") and "RESOLUTION." in line:
            try:
                parts = line.split()
                idx = parts.index("RESOLUTION.") + 1
                metadata["resolution"] = parts[idx] + " " + parts[idx + 1]
            except:
                pass
        elif line.startswith("SOURCE") and "ORGANISM_SCIENTIFIC:" in line:
            try:
                metadata["organism"] = line.split("ORGANISM_SCIENTIFIC:")[1].split(";")[0].strip()
            except:
                pass
        elif line.startswith("HETATM"):
            ligand = line[17:20].strip()
            metadata["ligands"].append(ligand)
            metadata["ligand_counts"][ligand] += 1
        elif line.startswith("SSBOND"):
            metadata["disulfide_bonds"].append(line)
        elif line.startswith("ATOM"):
            metadata["atoms"] += 1
            chain = line[21].strip()
            if chain:
                metadata["chains"].add(chain)
            element = line[76:78].strip()
            if element:
                metadata["elements"][element] = metadata["elements"].get(element, 0) + 1

    parser = PDBParser(QUIET=True)
    structure = parser.get_structure("structure", StringIO(pdb_string))
    for model in structure:
        for chain in model:
            metadata["residues"] += len([res for res in chain.get_residues() if res.id[0] == " "])
            seq = ""
            for res in chain:
                if res.id[0] == " ":
                    seq += THREE_TO_ONE.get(res.resname, "X")
            metadata['sequences'][chain.id] = seq

    return metadata

def get_uniprot_accession(pdb_id):
    """
    Retrieves the UniProt accession number for a given PDB ID.

    Parameters
    ----------
    pdb_id : str
        The PDB identifier.

    Returns
    -------
    str or None
        The UniProt accession number if found, otherwise None.
    """
    url = f"https://data.rcsb.org/rest/v1/core/polymer_entity/{pdb_id}/1"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        refs = data.get("rcsb_polymer_entity_container_identifiers", {}).get("reference_sequence_identifiers", [])
        for ref in refs:
            if ref.get("database_name") == "UniProt":
                return ref.get("database_accession")
    except:
        pass
    return None


def get_protein_name_from_uniprot(accession, translate=False):
    """
    Retrieves the recommended protein name from UniProt using an accession number.

    Parameters
    ----------
    accession : str
        The UniProt accession number.

    Returns
    -------
    str or None
        The full recommended name of the protein, or None if not found.
    """
    url = f"https://rest.uniprot.org/uniprotkb/{accession}.json"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        name = data.get("proteinDescription", {}).get("recommendedName", {}).get("fullName", {}).get("value", None)
        if translate and name:
            try:
                name = GoogleTranslator(source='en', target='pl').translate(name)
            except Exception as e:
                print(f"T≈Çumaczenie nazwy bia≈Çka nie powiod≈Ço siƒô: {e}")
        return name
    except:
        pass
    return None

def get_function_from_uniprot(accession, translate=False):
    url = f"https://rest.uniprot.org/uniprotkb/{accession}.json"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        descriptions = []
        has_function = False
        cofactor_names = set()

        for comment in data.get("comments", []):
            if comment.get("commentType") == "FUNCTION":
                texts = comment.get("texts", [])
                if texts:
                    raw_text = texts[0].get("value", "")
                    cleaned_text = re.sub(r'\(PubMed:[^)]+\)', '', raw_text)
                    descriptions.append(cleaned_text.strip())
                    has_function = True
            if comment.get("commentType") == "COFACTOR":
                cofactors = comment.get("cofactors", [])
                for cofactor in cofactors:
                    name = cofactor.get("name")
                    if name:
                        cofactor_names.add(name)

        # Dodajemy kofaktory jako osobne linie z my≈õlnikiem
        if cofactor_names:
            descriptions.append(f"Kofaktory: {', '.join(sorted(cofactor_names))}")

        # Dodajemy cechy jako osobne linie z my≈õlnikiem, ale pomijamy 'Disordered'
        for feature in data.get("features", []):
            feature_type = feature.get("type", "").lower()
            if feature_type in {"domain", "region", "motif"}:
                desc = feature.get("description")
                if desc != "Disordered":
                    descriptions.append(f"Cecha: {desc}")

        if not has_function:
            descriptions.insert(0, "Og√≥lna funkcja nie zosta≈Ça opisana w UniProt.")

        full_description = "\n".join(descriptions) if descriptions else None
        if translate and full_description:
            try:
                full_description = GoogleTranslator(source='en', target='pl').translate(full_description)
            except Exception as e:
                print(f"T≈Çumaczenie opisu funkcji nie powiod≈Ço siƒô: {e}")

        return full_description

    except:
        return None




def visualize_protein(pdb_string, style="cartoon", chain_colors=None,
                      show_ss=True, show_ligands=True, ligand_colors=None,
                      show_active_sites=False, active_site_color="magenta",
                      bg_color="white", active_site_residues=None, selected_chains=None):
    view = py3Dmol.view(width=800, height=600)
    view.addModel(pdb_string, "pdb")
    view.setBackgroundColor(bg_color)

    if selected_chains is None:
        selected_chains = list(chain_colors.keys()) if chain_colors else []

    if chain_colors:
        for chain, color in chain_colors.items():
            if chain in selected_chains:
                if color == "spectrum":
                    view.setStyle({'chain': chain}, {style: {'color': 'spectrum'}})
                elif color:
                    view.setStyle({'chain': chain}, {style: {'color': color}})
                else:
                    view.setStyle({'chain': chain}, {style: {'color': 'spectrum'}})
            else:
                view.setStyle({'chain': chain}, {'cartoon': {'color': 'gray', 'opacity': 0.1}})
    else:
        view.setStyle({style: {'color': 'spectrum'}})

    if show_ss:
        view.addStyle({'helix': True}, {'cartoon': {'color': 'red'}})
        view.addStyle({'sheet': True}, {'cartoon': {'color': 'yellow'}})

    if show_ligands and ligand_colors:
        for ligand, color in ligand_colors.items():
            if ligand == "HOH":
                # mniejszy promie≈Ñ dla wody
                stick_radius = 0.2
                sphere_radius = 0.4
            else:
                stick_radius = 0.5
                sphere_radius = 1.0
            view.setStyle({'resn': ligand}, {'stick': {'color': color, 'radius': stick_radius}})
            view.setStyle({'resn': ligand}, {'sphere': {'color': color, 'radius': sphere_radius}})


    if show_active_sites and active_site_residues:
        for site in active_site_residues:
            view.addStyle({'chain': site['chain'], 'resi': site['resnum']},
                          {'sphere': {'color': active_site_color, 'radius': 1.0}})
            view.addStyle({'chain': site['chain'], 'resi': site['resnum']},
                          {'stick': {'radius': 0.2}})

    view.zoomTo()
    view.setHoverable({}, True, """
    function(atom, viewer, event, container) {
        if (!atom.label) {
            atom.label = viewer.addLabel(atom.resn + " " + atom.resi + " (Chain " + atom.chain + ")", 
                                       {position: atom, backgroundColor: 'mintcream', fontColor:'black'});
        }
    }""", """
    function(atom, viewer) {
        if (atom.label) {
            viewer.removeLabel(atom.label);
            delete atom.label;
        }
    }""")
    return view


def ligand_color_controls(ligand_counts):
    st.subheader("üß™ Kolory Ligand√≥w:" if translate else "üß™ Ligand Coloring:")

    color_options = ["green", "red", "blue", "yellow", "cyan", "magenta", "orange", "white"]
    color_names_pl = {
        "green": "zielony",
        "red": "czerwony",
        "blue": "niebieski",
        "yellow": "≈º√≥≈Çty",
        "cyan": "b≈Çƒôkitny",
        "magenta": "magenta",
        "orange": "pomara≈Ñczowy",
        "white": "bia≈Çy"
    }

    ligand_colors = {}
    ligands = list(ligand_counts.items())

    num_cols = 2 if len(ligands) > 1 else 1
    cols = st.columns(num_cols)

    for idx, (ligand, count) in enumerate(ligands):
        col = cols[idx % num_cols]
        with col:
            ligand_colors[ligand] = st.selectbox(
                f"{ligand} ({count})",
                options=color_options,
                index=idx % len(color_options),
                key=f"ligand_color_{ligand}",
                format_func=lambda x: color_names_pl.get(x, x) if translate else x
            )
    return ligand_colors




def display_amino_acid_sequences(sequences, translate=True):
    if translate:
        st.subheader("üß¨ Sekwencje aminokwasowe")
        expander_label = "üìÑ Zobacz sekwencje w formacie FASTA"
        download_label = "üì• Pobierz FASTA"
        chain_label = "≈Åa≈Ñcuch"
        length_label = "D≈Çugo≈õƒá"
    else:
        st.subheader("üß¨ Amino Acid Sequences")
        expander_label = "üìÑ View FASTA sequences"
        download_label = "üì• Download FASTA"
        chain_label = "Chain"
        length_label = "Length"

    fasta_output = ""
    for chain, seq in sequences.items():
        st.markdown(f"**{chain_label} {chain}** ({length_label}: {len(seq)})")
        chunk_size = 60
        for i in range(0, len(seq), chunk_size):
            color = "#ffffff" if st.session_state.get("dark_mode", False) else "#000000"
            st.markdown(f"<pre style='color:{color}'>{i + 1:>4} {seq[i:i + chunk_size]}</pre>", unsafe_allow_html=True)     
        st.markdown("---")

        # Tworzenie FASTA
        fasta_output += f">Chain_{chain}\n"
        for i in range(0, len(seq), chunk_size):
            fasta_output += seq[i:i + chunk_size] + "\n"

    # Wy≈õwietlanie FASTA
    with st.expander(expander_label):
        st.code(fasta_output.strip(), language="fasta")

    # Przycisk do pobrania
    st.download_button(
        label=download_label,
        data=fasta_output,
        file_name="protein_sequences.fasta",
        mime="text/plain"
    )


def main():
    pdb_id = st.text_input(
        "Wpisz PDB ID (np. 3PAV, 6LU7)" if translate else "Enter PDB ID (e.g., 3PAV, 6LU7):",
        "3PAV"
    ).strip().upper()

    if not pdb_id:
        return

    with st.spinner("≈Åadujƒô..." if translate else "Loading..."):
        pdb_data = fetch_pdb(pdb_id)

    if not pdb_data:
        return

    metadata = extract_metadata(pdb_data)
    if translate:
        try:
            for key in ['resolution', 'experiment', 'organism']:
                if metadata.get(key):
                    metadata[key] = GoogleTranslator(source='en', target='pl').translate(metadata[key])
        except Exception as e:
            st.warning(f"B≈ÇƒÖd t≈Çumaczenia metadanych: {e}")

    accession = get_uniprot_accession(pdb_id)
    name = get_protein_name_from_uniprot(accession, translate=translate)
    function = get_function_from_uniprot(accession, translate=translate)

    # Sidebar - ustawienia
    with st.sidebar:
            
        dark_mode = st.checkbox("üåô Tryb ciemny" if translate else "üåô Dark mode")
        st.session_state["dark_mode"] = dark_mode

        if dark_mode:
            st.markdown("""
                <style>
                    .stApp {
                        background-color: #2e2e2e;
                        color: #fafafa;
                    }
                    .block-container {
                        background-color: #2e2e2e;
                        color: #fafafa;
                    }
                    .css-1cpxqw2, .css-1y4p8pa, .stText, .stMarkdown, .stCode {
                        color: #f0f0f0 !important;
                    }
                    .stCode {
                        background-color: #1f1f1f !important;
                    }
                    .stText {
                        font-weight: 500;
                        color: #eeeeee !important;
                    }
                </style>
            """, unsafe_allow_html=True)



        bg_color= "black" if dark_mode else "white"


        st.header("‚öôÔ∏è Ustawienia" if translate else "‚öôÔ∏è Settings")
        style = st.radio("Styl wizualizacji" if translate else "Visualization style", ["cartoon", "stick", "surface", "sphere", "line"])
        color = st.radio("Schemat kolor√≥w" if translate else "Color scheme", ["spectrum", "chain", "residue"])
        ligands = st.checkbox("Poka≈º ligandy" if translate else "Show ligands", value=True)

        chains = sorted(metadata['chains'])
        selected_chains = st.multiselect(
            "Wybierz ≈Ça≈Ñcuch(y)" if translate else "Select chain(s)",
            chains,
            default=chains
        )

        st.markdown("### üé® Kolory dla ≈Ça≈Ñcuch√≥w" if translate else "### üé® Chain colors")
        chain_colors = {}
        for chain in chains:
            picked = st.color_picker(f"{chain}", value="#FFFFFF")
            chain_colors[chain] = None if picked.upper() == "#FFFFFF" else picked

        bg_options = ["white", "black", "lightgray"]
        bg_names_pl = {
            "white": "bia≈Çy",
            "black": "czarny",
            "lightgray": "jasnoszary"
        }

        bg_color = st.selectbox(
            "T≈Ço" if translate else "Background",
            options=bg_options,
            format_func=lambda x: bg_names_pl.get(x, x) if translate else x
        )


    ligand_colors = ligand_color_controls(metadata['ligand_counts']) if metadata['ligand_counts'] else None

    # Wy≈õwietlanie
    col1, col2 = st.columns([1, 2])

    with col1:
        st.subheader("üîç Informacje o strukturze" if translate else "üîç Structure Information")
        if translate:
            st.markdown(f"""
            - **Tytu≈Ç:** {metadata['title']}
            - **Rozdzielczo≈õƒá:** {metadata['resolution']}
            - **Organizm:** {metadata['organism']}
            - **Eksperyment:** {metadata['experiment']}
            - **≈Åa≈Ñcuchy:** {', '.join(sorted(metadata['chains']))}
            - **Reszty:** {metadata['residues']}
            - **Atomy:** {metadata['atoms']}
            - **Mostki disulfidowe:** {len(metadata['disulfide_bonds'])}
            - **Miejsca aktywne:** {len(metadata['active_sites'])}
            """)
        else:
            st.markdown(f"""
            - **Title:** {metadata['title']}
            - **Resolution:** {metadata['resolution']}
            - **Organism:** {metadata['organism']}
            - **Experiment:** {metadata['experiment']}
            - **Chains:** {', '.join(sorted(metadata['chains']))}
            - **Residues:** {metadata['residues']}
            - **Atoms:** {metadata['atoms']}
            - **Disulfide Bonds:** {len(metadata['disulfide_bonds'])}
            - **Active Sites:** {len(metadata['active_sites'])}
            """)

        st.subheader("üî¨ Informacje o bia≈Çku" if translate else "üî¨ Protein Information")
        if name:
            st.markdown(f"**Nazwa:** {name}" if translate else f"**Name:** {name}")

    

            if function:
                st.markdown("**Funkcja:**" if translate else "**Function:**")

                lines = function.split("\n")
                total_words = sum(len(line.split()) for line in lines)
                if total_words > 50:
                    word_count = 0
                    first_part_lines = []
                    rest_lines = []
                    for i, line in enumerate(lines):
                        line_words = line.split()
                        if word_count + len(line_words) <= 50:
                            first_part_lines.append(line)
                            word_count += len(line_words)
                        else:
                            split_point = 50 - word_count
                            first_part_lines.append(" ".join(line_words[:split_point]))
                            rest_lines.append(" ".join(line_words[split_point:]))
                            rest_lines.extend(lines[i+1:])
                            break

                    # Dodaj my≈õlnik-kropkƒô tylko na poczƒÖtku pierwszej czƒô≈õci, na pierwszej linii
                    if first_part_lines:
                        first_part_lines[0] = "‚Ä¢ " + first_part_lines[0].lstrip()

                    first_text = " ".join(first_part_lines).strip()
                    st.markdown(first_text)

                    with st.expander("Poka≈º wiƒôcej" if translate else "Show more"):
                        for line in rest_lines:
                            line_strip = line.strip()
                            if line_strip:
                                st.markdown(line_strip)

                else:
                    # Kr√≥tki tekst, daj my≈õlnik-kropkƒô na poczƒÖtku pierwszej linii
                    full_lines = lines
                    if full_lines:
                        full_lines[0] = "‚Ä¢ " + full_lines[0].lstrip()
                    full_text = " ".join(full_lines).strip()
                    st.markdown(full_text)
            


    with col2:
        if translate:
                    st.markdown("""
                    **Przewodnik interakcji:**
                    - Najed≈∫ kursorem na atomy, aby zobaczyƒá informacje o resztach
                    - Kliknij na atomy, aby przypiƒÖƒá informacje
                    - Kliknij ponownie, aby usunƒÖƒá przypiƒôtƒÖ etykietƒô
                    """)

        else:
                    st.markdown("""
                    **Interaction Guide:**
                    - Hover over atoms to see residue information  
                    - Click on atoms to pin information  
                    - Click again to remove pinned label
                    """)

        viewer = visualize_protein(
            pdb_data,
            style=style,
            chain_colors=chain_colors,
            show_ss=True,
            show_ligands=ligands,
            ligand_colors=ligand_colors,
            show_active_sites=True,
            active_site_residues=metadata['active_sites'],
            selected_chains=selected_chains,
            bg_color=bg_color
        )
        components.html(viewer._make_html(), height=600, width=800)



    display_amino_acid_sequences(metadata['sequences'], translate=translate)

    if translate:
        st.markdown(f"[üîó Zobacz strukturƒô w bazie RCSB PDB](https://www.rcsb.org/structure/{pdb_id})")
        st.markdown("[üîó Odwied≈∫ bazƒô RCSB PDB](https://www.rcsb.org)")
        st.markdown(f"[üîó Zobacz na UniProt](https://www.uniprot.org/uniprotkb/{accession})")
    else:
        st.markdown(f"[üîó View this structure on RCSB PDB](https://www.rcsb.org/structure/{pdb_id})")
        st.markdown("[üîó Go to RCSB PDB](https://www.rcsb.org)")
        st.markdown(f"[üîó View on UniProt](https://www.uniprot.org/uniprotkb/{accession})")



if __name__ == "__main__":
    main()

import requests
import re
from io import StringIO
from Bio.PDB import PDBParser
import py3Dmol
import streamlit as st
from deep_translator import GoogleTranslator
import random

# ---------------------- UniProt & PDB info helpers ---------------------- #

def get_uniprot_accession(pdb_id):
    """
    Retrieves the UniProt accession number for a given PDB ID.

    Parameters
    ----------
    pdb_id : str
        The PDB identifier.

    Returns
    -------
    str or None
        The UniProt accession number if found, otherwise None.
    """
    url = f"https://data.rcsb.org/rest/v1/core/polymer_entity/{pdb_id}/1"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        refs = data.get("rcsb_polymer_entity_container_identifiers", {}).get("reference_sequence_identifiers", [])
        for ref in refs:
            if ref.get("database_name") == "UniProt":
                return ref.get("database_accession")
    except:
        pass
    return None

def get_protein_name_from_uniprot(accession, translate=False):
    """
    Retrieves the recommended protein name from UniProt using an accession number.

    Parameters
    ----------
    accession : str
        The UniProt accession number.

    Returns
    -------
    str or None
        The full recommended name of the protein, or None if not found.
    """
    url = f"https://rest.uniprot.org/uniprotkb/{accession}.json"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        name = data.get("proteinDescription", {}).get("recommendedName", {}).get("fullName", {}).get("value", None)
        if translate and name:
            try:
                name = GoogleTranslator(source='en', target='pl').translate(name)
            except Exception as e:
                print(f"Tłumaczenie nazwy białka nie powiodło się: {e}")
        return name
    except:
        pass
    return None

def get_function_from_uniprot(accession, translate=False):
    """
    Retrieves a functional description of a protein from UniProt.

    Parameters
    ----------
    accession : str
        The UniProt accession number.

    Returns
    -------
    str or None
        Combined functional description text, or None if not found.
    """
    url = f"https://rest.uniprot.org/uniprotkb/{accession}.json"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        descriptions = []
        has_function = False
        cofactor_names = set()
        feature_descriptions = set()

        for comment in data.get("comments", []):
            if comment.get("commentType") == "FUNCTION":
                texts = comment.get("texts", [])
                if texts:
                    raw_text = texts[0].get("value", "")
                    cleaned_text = re.sub(r'\(PubMed:[^)]+\)', '', raw_text)
                    descriptions.append(cleaned_text.strip())
                    has_function = True
            if comment.get("commentType") == "COFACTOR":
                cofactors = comment.get("cofactors", [])
                for cofactor in cofactors:
                    name = cofactor.get("name")
                    if name:
                        cofactor_names.add(name)

        if cofactor_names:
            descriptions.append("Białko posiada miejsce wiązania kofaktora: " + ", ".join(sorted(cofactor_names)))

        for feature in data.get("features", []):
            if feature.get("type") in {"Domain", "Region", "Motif"}:
                desc = feature.get("description")
                if desc:
                    feature_descriptions.add(f"Cechy: {desc}")

        descriptions.extend(sorted(feature_descriptions))

        if not has_function:
            descriptions.insert(0, "Ogólna funkcja nie została opisana w UniProt.")

        full_description = "\n".join(descriptions) if descriptions else None
        if translate and full_description:
            try:
                full_description = GoogleTranslator(source='en', target='pl').translate(full_description)
            except Exception as e:
                print(f"Tłumaczenie opisu funkcji nie powiodło się: {e}")

        return full_description

    except:
        return None

def get_structure_title(pdb_id):
    """
    Retrieves the structure title from the RCSB PDB entry.

    Parameters
    ----------
    pdb_id : str
        The PDB identifier.

    Returns
    -------
    str or None
        The structure title, or None if not found.
    """
    url = f"https://data.rcsb.org/rest/v1/core/entry/{pdb_id}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return data.get("struct", {}).get("title", None)
    except:
        return None

def get_organism_from_pdb(pdb_id):
    """
    Retrieves the organism name from which the protein originates, based on PDB ID.

    Parameters
    ----------
    pdb_id : str
        Protein Data Bank identifier.

    Returns
    -------
    str
        Scientific name of the organism or "Unknown" if unavailable.
    """
    try:
        url_entry = f"https://data.rcsb.org/rest/v1/core/entry/{pdb_id}"
        response = requests.get(url_entry)
        response.raise_for_status()
        entry_data = response.json()
        entities = entry_data.get("rcsb_entry_container_identifiers", {}).get("polymer_entity_ids", [])
        if entities:
            entity_id = entities[0]
            url_entity = f"https://data.rcsb.org/rest/v1/core/polymer_entity/{pdb_id}/{entity_id}"
            entity_response = requests.get(url_entity)
            entity_response.raise_for_status()
            entity_data = entity_response.json()
            sources = entity_data.get("rcsb_entity_source_organism", [])
            if sources:
                return sources[0].get("scientific_name", "Nieznany")
    except:
        pass
    return "Nieznany"

def get_fasta_from_uniprot(accession):
    """
    Pobiera sekwencję FASTA białka z UniProt na podstawie accession.

    Args:
        accession (str): UniProt accession number.

    Returns:
        str or None: Sekwencja FASTA w formacie tekstowym lub None jeśli nie udało się pobrać.
    """
    url = f"https://rest.uniprot.org/uniprotkb/{accession}.fasta"
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.text
    except Exception as e:
        st.error(f"Nie udało się pobrać sekwencji FASTA: {e}")
        return None

# ---------------------- Streamlit App ---------------------- #

st.set_page_config(page_title="Przeglądarka struktury białka 3D", layout="wide")
st.title("🧬 Wizualizacja struktury białka 3D")

pdb_id = st.text_input("Wprowadź ID PDB (np. 2FOS, 6LU7):", "2FOS").upper()

# Ustawienia w sidebarze
with st.sidebar:
    st.header("⚙️ Ustawienia wizualizacji")
    style_option = st.selectbox("Styl wizualizacji", ["cartoon", "stick", "surface"])
    color_option = st.selectbox("Schemat kolorów", ["spectrum", "chain", "residue"])
    show_ligands = st.checkbox("Pokaż ligandy", value=True)

three_to_one = {
    'ALA': 'A', 'ARG': 'R', 'ASN': 'N', 'ASP': 'D',
    'CYS': 'C', 'GLN': 'Q', 'GLU': 'E', 'GLY': 'G',
    'HIS': 'H', 'ILE': 'I', 'LEU': 'L', 'LYS': 'K',
    'MET': 'M', 'PHE': 'F', 'PRO': 'P', 'SER': 'S',
    'THR': 'T', 'TRP': 'W', 'TYR': 'Y', 'VAL': 'V',
    'SEC': 'U', 'PYL': 'O'
}

def fetch_pdb(pdb_id):
    """
    Fetches a PDB file from the RCSB PDB database using the PDB ID.
    
    Args:
        pdb_id (str): Protein PDB identifier.
        
    Returns:
        str: The PDB file content as text.
        None: If fetching failed.
    """
    url = f"https://files.rcsb.org/download/{pdb_id}.pdb"
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        st.error(f"Nie udało się pobrać danych dla ID: {pdb_id}")
        return None

def show_pdb(pdb_string, ligands=None, highlight_ligand=None,
             style="cartoon", color="spectrum", show_ligands=True):
    """
    Generates a 3D visualization of a protein structure from a PDB file.
    
    Args:
        pdb_string (str): Text representation of the PDB structure.
        style (str): Visualization style ("cartoon", "stick", "surface").
        color (str): Color scheme for the structure ("spectrum", "chain", "residue").
        ligands (bool): Flag to display ligands.
        
    Returns:
        view: A py3Dmol object containing the visualization.
    """
    view = py3Dmol.view(width=800, height=600)
    view.addModel(pdb_string, "pdb")

    # Ustaw styl i kolor głównej struktury
    if style == "cartoon":
        view.setStyle({"cartoon": {"color": color}})
    elif style == "stick":
        view.setStyle({"stick": {"colorscheme": color}})
    elif style == "surface":
        view.setStyle({"surface": {"colorscheme": color}})
    else:
        # Domyślnie cartoon z spectrum, jeśli nieznany styl
        view.setStyle({"cartoon": {"color": "spectrum"}})

    resn_colors = {}
    predefined_colors = [
        'orange', 'blue', 'green', 'purple', 'cyan', 'magenta', 'yellow', 'pink', 'brown'
    ]
    color_index = 0

    # Jeśli pokazujemy ligandy i mamy ich listę, rysujemy kule i etykiety ligandów
    if show_ligands and ligands:
        for residue in ligands:
            resn = residue['resn']
            if resn not in resn_colors:
                if color_index < len(predefined_colors):
                    resn_colors[resn] = predefined_colors[color_index]
                    color_index += 1
                else:
                    resn_colors[resn] = "#{:06x}".format(random.randint(0, 0xFFFFFF))

        for residue in ligands:
            selection = {
                'hetflag': True,
                'resn': residue['resn'],
                'chain': residue['chain'],
                'resi': residue['resi']
            }
            color_lig = resn_colors[residue['resn']]
            view.addStyle(selection, {"sphere": {"radius": 1.5, "color": color_lig, "alpha": 0.8}})
            view.addResLabels(selection, {
                "font": "Arial",
                "fontSize": 12,
                "fontColor": "black",
                "showBackground": True,
                "backgroundColor": "white",
                "backgroundOpacity": 0.8,
                "alignment": "center"
            })

    # Podświetlenie wybranego ligandu (np. po kliknięciu)
    if highlight_ligand:
        sel = {
            'hetflag': True,
            'resn': highlight_ligand['resn'],
            'chain': highlight_ligand['chain'],
            'resi': highlight_ligand['resi']
        }
        view.addStyle(sel, {"sphere": {"radius": 2.0, "color": "red", "alpha": 1.0}})
        view.addResLabels(sel, {
            "font": "Arial",
            "fontSize": 14,
            "fontColor": "red",
            "showBackground": True,
            "backgroundColor": "white",
            "backgroundOpacity": 0.9,
            "alignment": "center"
        })

        # Pokazujemy atomy w promieniu 5 Å od ligandowych atomów
        parser = PDBParser(QUIET=True)
        structure = parser.get_structure("structure", StringIO(pdb_string))
        model = next(structure.get_models())
        atoms = list(model.get_atoms())

        ligand_atoms = []
        for atom in atoms:
            res = atom.get_parent()
            if (res.id[0] != " ") and (res.resname == highlight_ligand['resn']) and \
               (res.parent.id == highlight_ligand['chain']) and (res.id[1] == highlight_ligand['resi']):
                ligand_atoms.append(atom)

        from Bio.PDB import NeighborSearch
        ns = NeighborSearch(atoms)
        close_atoms = set()
        for latom in ligand_atoms:
            nearby = ns.search(latom.coord, 5.0)
            close_atoms.update(nearby)

        for atom in close_atoms:
            res = atom.get_parent()
            if res.resname != highlight_ligand['resn'] or res.parent.id != highlight_ligand['chain'] or res.id[1] != highlight_ligand['resi']:
                sel_atom = {
                    'chain': res.parent.id,
                    'resi': res.id[1],
                    'atom': atom.get_name()
                }
                view.addStyle(sel_atom, {"sphere": {"radius": 1.2, "color": "blue", "alpha": 0.6}})

        view.zoomTo(sel)
    else:
        view.zoomTo()

    return view



def extract_sequence(pdb_string):
    """
    Extracts the amino acid sequence from a PDB file.
    
    Args:
        pdb_string (str): Text representation of the PDB structure.
        
    Returns:
        dict: A dictionary containing sequences for each protein chain.
    """
    parser = PDBParser(QUIET=True)
    structure = parser.get_structure("model", StringIO(pdb_string))
    seqs = {}
    for model in structure:
        for chain in model:
            chain_id = chain.id
            seq = ""
            for res in chain:
                if res.id[0] == " ":
                    resname = res.resname
                    one_letter = three_to_one.get(resname, "X")
                    seq += one_letter
            seqs[chain_id] = seq
    return seqs

pdb_data = fetch_pdb(pdb_id)
if pdb_data:
    col1, col2 = st.columns([1, 2])

    with col1:
        st.subheader(f"🔬 Struktura: {pdb_id}")
        st.markdown(f"[🔗 Zobacz na RCSB PDB](https://www.rcsb.org/structure/{pdb_id})")

        accession = get_uniprot_accession(pdb_id)
        if accession:
            st.markdown(f"[🔗 Zobacz na UniProt](https://www.uniprot.org/uniprotkb/{accession})")

        st.code(pdb_data[:300] + "\n...")

        name = None
        if accession:
            name = get_protein_name_from_uniprot(accession, translate=True)

        if not name:
            title = get_structure_title(pdb_id)
            if title:
                try:
                    name = GoogleTranslator(source='en', target='pl').translate(title)
                except Exception as e:
                    print(f"Tłumaczenie tytułu struktury nie powiodło się: {e}")
                    name = title
            else:
                name = "Brak nazwy"

        organism = get_organism_from_pdb(pdb_id)
        description = get_function_from_uniprot(accession, translate=True) if accession else get_structure_title(pdb_id) or "Brak opisu"

        st.markdown(f"**Nazwa:** {name}")
        st.markdown(f"**Organizm:** {organism}")
        st.markdown("**Funkcja/Informacje:**")
        if description:
            for line in description.split("\n"):
                st.markdown(f"- {line}")
        else:
            st.markdown("Brak dostępnego opisu.")

        st.subheader("📄 Sekwencja aminokwasowa")
        sequences = extract_sequence(pdb_data)
        if sequences:
            for chain_id, seq in sequences.items():
                st.text_area(f"Łańcuch {chain_id}", value=seq, height=150)
        else:
            st.write("Brak dostępnej sekwencji do wyświetlenia.")
        
        if accession:
            fasta_seq = get_fasta_from_uniprot(accession)
            if fasta_seq:
                st.download_button(
                    label="📥 Pobierz plik FASTA",
                    data=fasta_seq,
                    file_name=f"{accession}.fasta",
                    mime="text/plain"
                )



    with col2:
        # === Wyciągnij dostępne ligandy z pliku PDB ===
                # === Zidentyfikuj wszystkie ligandy z dokładną lokalizacją ===
        parser = PDBParser(QUIET=True)
        structure = parser.get_structure("ligand_model", StringIO(pdb_data))
        ligands_full = []

        for model in structure:
            for chain in model:
                for residue in chain:
                    if residue.id[0] != " " and residue.resname not in ("HOH", "DOD", "WAT"):
                        ligands_full.append({
                            "resn": residue.resname,
                            "chain": chain.id,
                            "resi": residue.id[1]
                        })

        ligand_options = [f"{lig['resn']} {lig['chain']} {lig['resi']}" for lig in ligands_full]
        selected_ligand_label = st.selectbox("🔎 Wybierz ligand do przybliżenia:", ["Cała struktura"] + ligand_options)

        
        # === Stwórz wizualizację struktury ===
        view = py3Dmol.view(width=800, height=600)
        view.addModel(pdb_data, "pdb")

        if selected_ligand_label != "Cała struktura":
            resn, chain, resi = selected_ligand_label.split()
            resi = int(resi)
            view.setStyle({style_option: {"color": color_option}})
            selection = {"resn": resn, "chain": chain, "resi": resi, "hetflag": True}
            view.addStyle(selection, {"stick": {"colorscheme": "greenCarbon"}, "sphere": {"radius": 2.0, "color": "lime"}})
            view.addResLabels(selection, {
                "font": "Arial",
                "fontSize": 14,
                "fontColor": "black",
                "showBackground": True,
                "backgroundColor": "white",
                "backgroundOpacity": 0.6,
                "alignment": "center"
            })
            view.zoomTo(selection)

        else:
            # Cała struktura
            view.setStyle({style_option: {"color": color_option}})
            if show_ligands:
                site_lines = [line for line in pdb_data.splitlines() if line.startswith("REMARK 800 SITE_DESCRIPTION")]
                
                binding_residues = []
                pattern = re.compile(r'REMARK 800 SITE_DESCRIPTION: BINDING SITE FOR RESIDUE (\w{1,3}) (\w) (\d+)')
                for line in site_lines:
                    match = pattern.search(line)
                    if match:
                        resn, chain, resi = match.groups()
                        binding_residues.append({'resn': resn, 'chain': chain, 'resi': int(resi)})

                resn_colors = {}
                predefined_colors = [
                     'cyan', 'magenta','green', 'orange', 'purple', 'yellow', 'pink', 'brown,' 'red', 'blue'
                ]
                color_index = 0

                for residue in binding_residues:
                    resn = residue['resn']
                    if resn not in resn_colors:
                        if color_index < len(predefined_colors):
                            resn_colors[resn] = predefined_colors[color_index]
                            color_index += 1
                        else:
                            resn_colors[resn] = "#{:06x}".format(random.randint(0, 0xFFFFFF))

                for residue in binding_residues:
                    selection = {
                        'hetflag': True,
                        'resn': residue['resn'],
                        'chain': residue['chain'],
                        'resi': residue['resi']
                    }
                    color = resn_colors[residue['resn']]
                    view.addStyle(selection, {"sphere": {"radius": 2.0, "color": color}})
                    view.addResLabels(selection, {
                        "font": "Arial",
                        "fontSize": 10,
                        "fontColor": "black",
                        "showBackground": True,
                        "backgroundColor": "white",
                        "backgroundOpacity": 0.8,
                        "alignment": "center"
                    })

            view.zoomTo()

        st.components.v1.html(view._make_html(), height=600, width=800)
